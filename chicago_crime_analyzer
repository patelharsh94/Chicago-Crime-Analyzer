//
// C++ program to analyze Chicago crime data.
//
// Harsh Patel
// U. Illinois, Chicago
// CS341, Fall 2015
// Homework 3
//

#include <iostream>
#include <iterator>
#include <fstream>
#include <algorithm>
#include <string>
#include <vector>
#include <sstream>

using namespace std;

// This class will hold the basic information for a crime report.
class crimeReport
{
    public:
        string IUCR;        // The IUCR code
        int comNumber;      // The community number
        int year;           // The year the crime happened

        // The default case.
        crimeReport()
        {}

        // Initializing the values.
        crimeReport(string iucr, int cNum, int currYear)
        // PRE: iurc, cNum and currYear must be initialized.
        // POST: creates a crime report object that initializes
        //       class members IUCR to iucr, comNumber to cNum
        //       and year to currYear.
        {
            IUCR = iucr;
            comNumber = cNum;
            year = currYear;
        }
};

// This class will help the first output, it will hold the IUCR information.
class shortIUCR
{
    public:
        string IUCR;            // The IURC of the crime
        string description;     // The description of the crime
        string sDescription;    // A short description of the crime
        int number;             // The n'th crime

        shortIUCR()
        {

        }

        shortIUCR(string iucr, string Description, string secondDescription, int Number)
        // PRE: iucr, Description, secondDescription and Number must be initialized.
        // POST: Initialized the shortIUCR class.
        //       Class member IUCR is initialized to iucr
        //       description to Description,
        //       sDescription and number to Number.
        //
        {
            IUCR = iucr;
            description = Description;
            sDescription = secondDescription;
            number = Number;
        }
};
// This class will hold the iucr codes and their description.
class codeDes
{
    public:
        string IUCR;        // The IUCR code
        string primDes;     // The primary description
        string secDes;      // The secondary description

        // base constructor
        codeDes()
        {}

        codeDes(string iucr, string pDes, string sDes)
        // PRE: iucr, pDes and sDes must be initialized.
        // POST: class member IUCR is initialized to iucr,
        //                    primDes is initialized to pDes
        //                    secDes is initialized to secDes.
        {
            IUCR = iucr;
            primDes = pDes;
            secDes = sDes;
        }
};


// This is a helper function for parsing a line on input.
crimeReport crimeParser(string& line)
// PRE: the line of input must be initialized.
// POST: FCTVAL == one crime report object that consists
//       of all the relevant input values.
{
    istringstream strstream(line);          // The line of input.
    string crap;                            // useless values from the input.
    string IUCR;                            // The IUCR from the input.
    string comNumber;                       // The community number
    string year;                            // The year the crime was committed.

                                            // Initialize the number with dummy data.
    int communityNumber = 0;
    int Year = 0;


    getline(strstream, crap, ',');          // removing crap input values.

    getline(strstream, IUCR, ',');          // getting IUCR

    getline(strstream, crap, ',');          // removing more crap input values.
    getline(strstream, crap, ',');
    getline(strstream, crap, ',');
    getline(strstream, crap, ',');
    getline(strstream, crap, ',');

    getline(strstream, comNumber, ',');     // getting the community number.

    getline(strstream, year, ',');          // getting the year.

    if(comNumber.length() == 0)             // if the comNumber is not there, then
    {                                       // initialize it to 0.
        comNumber = "0";
    }

    if(year.length() == 0)                  // if the year is not there, then
    {                                       // initialize it to 0.
        year = "0";
    }

    communityNumber = stoi(comNumber);      // saving the communityNumber and year.
    Year = stoi(year);

    return crimeReport(IUCR, communityNumber, Year);

}
// This is a helper function for parsing the IUCR codes file.
codeDes codeParser(string & line)
// PRE: line must be initialized.
// POST: FCTVAL == a codeDes object which stores info about an IUCR code.
{
    istringstream strstream(line);                  // line of input.

    string IUCR;                                    // The IUCR
    string primaryDes;                              // The primaryDes
    string secondaryDes;                            // The secondaryDes


    getline(strstream, IUCR, ',');                  // storing the IUCR
    getline(strstream, primaryDes, ',');            // storing the primary description
    getline(strstream, secondaryDes, ',');          // storing the secondary description

    return codeDes(IUCR,primaryDes,secondaryDes);
}

// This function reads in the IUCR codes file.
void readInIUCR (string& fileName, vector<codeDes>& codeList, int & totalCodes)
// PRE: filename, codeList and totalCodes must be initialized.
{
    ifstream ifstreamFile(fileName);                                // Saving the fileName.
    string line;                                                    // one line of IUCR info
    string IUCR;                                                    // IUCR code
    string primaryDes;                                              // The primary description
    string secondDes;                                               // The secondary description
    int total;                                                      // Counter for the number of total codes.

    codeList.reserve(50);                                           // pre-allocating for speed

    total = 0;
    getline(ifstreamFile, line);

    while (getline(ifstreamFile, line))                             // while there is a line
    {                                                               // read the line and parse it.
        total++;
        codeList.push_back(codeParser(line));
    }

    totalCodes = total;
}
// The function reads in the file and returns a big vector of crime reports.
void readInCrime(string& fileName, int& totalCrime, vector <crimeReport> & listOfCrimes, int &minYear)
// PRE: fileName, totalCrime, listOfCrimes and minYear must be initialized
{
    // Reading the crime file.
    ifstream ifstreamFile(fileName);                                // The file name
    string line;                                                    // one line of crime report.
    string IUCR;                                                    // The IUCR
    string comStr;                                                  // The community
    string yrStr;                                                   // The year
    crimeReport temp;                                               // The temporary crimeReport.
    bool isFirst;                                                   // Is this the first input?
    int total;                                                      // The total crimes
    int communityNumber;                                            // The community number of where the crime happened.

    isFirst = true;                                                 // Initializing values.
    total = 0;
    communityNumber = 0;

    listOfCrimes.reserve(100000);                                   // preallocating values for speed.

    getline(ifstreamFile, line);                                    // skipping the first line

    while (getline(ifstreamFile, line))                             // While there is an input, read it and parse it.
    {
        total++;
        temp = crimeParser(line);                                   // parse the crime and add it to the list.
        listOfCrimes.push_back(temp);

        if(isFirst)                                                 // If the first input, get a min year.
        {
            minYear = temp.year;
            isFirst = false;
        }

        if(temp.year < minYear)                                     // reset min year if new min is found.
        {
            minYear = temp.year;
        }
    }
    totalCrime = total;
}
// This function reads in community information and stores it in a vector of strings
void readCom(string & fileName, vector<string>& comName, int& communities)
// PRE: fileName, comName and communities must be initialized.
{
    ifstream ifstreamFile(fileName);                            // connecting to the file.
    string line;                                                // The input.
    string name;                                                // The name of the community
    string crap;                                                // This will be the community number
    vector<string> comNames;                                    // A list of all the community names
    comName.reserve(80);

    getline(ifstreamFile, line);                                // removing the first line..

    while (getline(ifstreamFile, line))                         // While there is a line, read the line
    {                                                           // and parse the input and add it to the list.
        istringstream strstream(line);
        getline(strstream, crap, ',');
        getline(strstream, name, ',');

        comName.push_back(name);
        communities++;
    }

}

// This function prints out the top 10 crimes
void printTopten(vector<codeDes> &codeList, vector<crimeReport> &allCrimes, int& totalCodes)
// PRE: codeList, allCrimes and totalCodes must be initialized.
{
    int IUCRCrimeCount;                                 // A counter for crimes.
    shortIUCR temp;                                     // A temp shortIUCR object for saving input.
    string description;                                 // The description of the crime
    string secondDescription;                           // The secondary description of the crime
    string currIUCR;                                    // The current IUCR code
    string prevIUCR;                                    // The previous IUCR code, used to print distinct values.
    bool isFirst;                                       // Is this the first input.
    vector<shortIUCR> finalIUCR;                        // The IUCR's with the numbers.
    codeDes tempObj;                                    // A temp codeDes object to store the input.
    finalIUCR.reserve(totalCodes);                      // pre-allocating the vector to the size of the codes.
    auto a = codeList.begin();;                         // Will be used as an iterator.

    isFirst = true;                                     // Initializing values.

    IUCRCrimeCount = 1;
    prevIUCR = " ";

    for (auto &iter : allCrimes)                        // For all crimes in the list allCrimes
    {
        currIUCR = iter.IUCR;

                                                        // when we have a new IUCR check if it exists
        if (currIUCR != prevIUCR)
        {
            for(auto &i : codeList)                     // for all codes in codeList
            {
                if(i.IUCR == prevIUCR)                  // if the code is there,
                {
                    description = i.primDes;
                    secondDescription = i.secDes;
                    break;
                }
            }
            auto  a = find_if(codeList.begin(), codeList.end(), [&](codeDes &obj)
            {
                return obj.IUCR == iter.IUCR;
            });

        }

        // if the end was not reached, save some information.
        if (a != codeList.end())
        {
            if (prevIUCR == currIUCR)                           // Counting the number of the same IUCR
            {
                IUCRCrimeCount++;
            }
            else                                                // else push the IUCR's in the list.
            {
                temp = shortIUCR(prevIUCR, description, secondDescription, IUCRCrimeCount);
                finalIUCR.push_back(temp);
                IUCRCrimeCount = 1;
            }

        }
        prevIUCR = currIUCR;
    }
    // sorting the final IUCR vector

    sort(finalIUCR.begin(), finalIUCR.end(), [](shortIUCR c1, shortIUCR c2)
    {
        return c1.number > c2.number;
    }
    );


    cout << ">> Top-10 Crimes <<"<< endl;                           // Printing the results.
    cout << "Rank\tIUCR\tNumber\tDescription"<< endl;
    // print out the top 10
    for (int i = 0; i < 10; i++)
    {

        cout <<i+1<<".\t" << finalIUCR[i].IUCR << "\t" << finalIUCR[i].number << "\t" << finalIUCR[i].description
             << " (" << finalIUCR[i].sDescription << ") " << endl;
    }
}
// This is a helper function that prints out the community crime informaion
void printComCrime(vector<crimeReport> &allCrimes, vector<codeDes> codeList,
                   int comNumber, int allCrimeNum)
// PRE: allCrimes, codeList, comNumber and allCrimeNum must be initialized.
{
    int homicide;                                       // Homicide counter
    int totalCrime;                                     // Total crime counter
    int IUCRCrimeCount;                                 // Crime by IUCR counter
    double percentage;                                  // For calculating percentages
    string currIUCR;                                    // Current IUCR and previous IUCR
    string prevIUCR;                                    // for checking for distinct values.
    string description;                                 // Description of the crime
    string secondDescription;                           // Short description of the crime.
    vector<shortIUCR> finalIUCR;                        // A list of all the crimes by IUCR.
    auto a = codeList.begin();;                         // For iterators.

    homicide = 0;
    totalCrime = 0;
    IUCRCrimeCount = 1;
    percentage = 0.0;
    prevIUCR = " ";

    // getting the total
    totalCrime = count_if(allCrimes.begin(), allCrimes.end(), [&](crimeReport obj)
    {
        return obj.comNumber == comNumber;
    });

    for (auto &iter : allCrimes)                        // go through all crimes.
    {
        currIUCR = iter.IUCR;
        if (iter.comNumber == comNumber)                // if the community numbers match
        {
                                                        // Count all the homicides.
            if (iter.IUCR == "0110" || iter.IUCR == "0130" || iter.IUCR == "0141" || iter.IUCR == "0142")
            {
                homicide++;
            }

            // when we have a new IUCR check if it exists
            if (currIUCR != prevIUCR)
            {
                for (auto &i : codeList)                // Find the code.
                {
                    if (i.IUCR == prevIUCR)
                    {
                        description = i.primDes;
                        secondDescription = i.secDes;
                        break;
                    }
                }
                auto  a = find_if(codeList.begin(), codeList.end(), [&](codeDes &obj)
                {
                    return obj.IUCR == iter.IUCR;
                });
            }

            // if the end was not reached, save some information.
            if (a != codeList.end())                        // Count all the crimes by IUCR in the community.
            {
                if (prevIUCR == currIUCR)
                {
                    IUCRCrimeCount++;
                }
                else
                {
                    shortIUCR temp = shortIUCR(prevIUCR, description, secondDescription, IUCRCrimeCount);
                    finalIUCR.push_back(temp);
                    IUCRCrimeCount = 1;
                }

            }
            prevIUCR = currIUCR;
        }

    }

    // sorting the final iurc vector
    sort(finalIUCR.begin(), finalIUCR.end(), [](shortIUCR c1, shortIUCR c2)
    {
        return c1.number > c2.number;
    }
    );

                                                                    // Printing the output.
    cout << ">> Total: "<< totalCrime << endl;
    percentage = ((totalCrime*1.0 / allCrimeNum * 1.0) * 100.0);
    cout << ">> Percentage: " << percentage << "%" << endl;
    cout << ">> Homicide: " << homicide << endl;
    cout << ">> Top-5 Crimes <<" << endl;
    cout << "Rank\tIUCR\tNumber\tDescription" << endl;
                                                                    // print out the top 10
    for (int i = 0; i < 5; i++)
    {

        cout << i + 1 << ".\t" <<finalIUCR[i].IUCR << "\t" << finalIUCR[i].number << "\t" << finalIUCR[i].description
             << " (" << finalIUCR[i].sDescription << ") " << endl;
    }

}
// This part prints information about specific communities
void printComInfo(vector<crimeReport> &allCrimes,vector<string> comName, vector<codeDes> codeList, int totalCrimes)
// PRE: allCrimes, comName, codeList and totalCrimes must be initialized.
{
    int comNumber;                                                  // Community Number.
    vector<crimeReport> communityInfo;                              // An Array of info about a community.
    communityInfo.reserve(500);                                     // Reserving space for speed.

    cout << "\n\n\n>> By Community <<" << endl;

    while(true)                                                     // Go on until the user enters 0.
    {
        cout << "\n\nPlease enter a community number [1..77],  0 to stop: ";
        cin >> comNumber;
        // end if the user wants
        if (comNumber == 0)                                         // if community number = 0 than end.
        {
            return;
        }

        if (comNumber > 77 || comNumber < 0)                        // If invalid input
        {
            cout << "** Invalid community number, please try again..."<< endl;
        }
        else                                                        // else print the info.
        {
            cout << ">> " << comName[comNumber - 1] << " <<" << endl;
            printComCrime(allCrimes,codeList,comNumber, totalCrimes);
        }

    }
}
// This function analizes information about certain IUCR's and prints them.
void printIUCRInfo(vector<crimeReport> &allCrimes, vector<codeDes> codeList, int &minYear, int& totalCrime)
// PRE: allCrimes, codeList, minYear and totalCrime must be initialized.
{
    string IUCRCode;                                                // The IUCR code.
    int total;                                                      // Total crime
    int currYear;                                                   // Current and previous year to differentiate
    int prevYear;                                                   // years.
    int crimeForYear;                                               // Total crime for that year
    double percentage;                                              // To calculate the percentages
    bool isFirst;                                                   // To check is first.


    total = 0;                                                      // Initializing all the variables.
    prevYear = 0;
    percentage = 0.0;
    crimeForYear = 0;
    isFirst = true;


    cout << "\n\n\n>> By IUCR Crime Code <<" << endl;

    // asking user to input the IUCR and then printing the info they need.
    while(true)
    {
        cout << "\n\nPlease enter an IUCR crime code [e.g. 0110 or 031A], 0000 to stop:" ;
        cin >> IUCRCode;
        if(IUCRCode == "0000")                                      // If the user enters 000, end the loop.
        {
            cout <<"\n\n\n>> DONE! <<\n\n\n";
            return;
        }

        // find the code..
        auto a = find_if(codeList.begin(), codeList.end(), [&](codeDes & obj)
        {
            return obj.IUCR == IUCRCode;
        }
        );

        // if the code was not found.. invalid code.. try again.
        if(a == codeList.end())
        {
            cout << "** Invalid IUCR crime code, please try again..." << endl;
            isFirst = true;
        }
        else
        {
            // print the primary and second descriptions..
            cout << ">> " << (*a).primDes << " (" << (*a).secDes << " )" << endl;
            // getting the total
            total = count_if(allCrimes.begin(), allCrimes.end(), [&] (crimeReport obj)
            {
                return obj.IUCR == IUCRCode;
            });

            cout << ">> Total:\t" << total << endl;
            percentage = (total*1.0 / totalCrime*1.0) * 100;
            cout << ">> Percentage: " << percentage << "%" << endl;
            cout << ">> By Year:\n";
            total = 0;

            // sort by IUCR..
            sort(allCrimes.begin(), allCrimes.end(), [&](crimeReport &a, crimeReport &b)
            {
                return a.IUCR > b.IUCR;
            }
            );

            // sort by year..
            sort(allCrimes.begin(), allCrimes.end(), [&](crimeReport &a, crimeReport &b)
            {
                return a.year > b.year;
            }
            );
            // search the database for the IUCR
            for(auto &iter : allCrimes)
            {

                if(iter.IUCR == IUCRCode)                           // If the IUCR's match
                {
                    currYear = iter.year;
                    if(currYear != prevYear && isFirst == false)    // if it is a new year
                    {                                               // then print info for the
                                                                    // previous year.
                        cout << "   " << prevYear << ": " << crimeForYear << endl;
                        crimeForYear = 1;
                    }
                    else                                            // else increment the crime
                    {                                               // for that year.
                        crimeForYear++;
                        isFirst = false;
                    }
                    prevYear = currYear;
                }
            }
        }

        if(isFirst == false)
        {
            // The last one
            cout << "   " << currYear << ": " << crimeForYear << endl;
            // resetting the values.
            crimeForYear = 0;
            isFirst = true;
        }
    }
}
int main()
{
    string CRIME_2014_2015;                             // Stores the name of the crime file.
    string IUCR_CODES;                                  // Stores the filename of the iucr file.
    string CRIME;                                       // Stores the file name of the crimes file.
    string COMMUNITY;                                   // Stores the file name of the community file.
    string fileName;                                    // Stores the current file name.
    int totalCrime;                                     // The total number of crime.
    int totalCodes;                                     // The total number of IUCR codes.
    int totalCommunities;                               // The total number of communities.
    int minYear;                                        // The minimum year.
    vector<crimeReport> allCrimes;                      // Stores all the crime data
    vector<codeDes> codeList;                           // This is the list of all the code.
    vector<string> comNames;                            // The names of all the communities.

    CRIME_2014_2015 = "Crimes-2014-2015.csv";           // Initializing all the values.
    IUCR_CODES = "IUCR-codes.csv";
    CRIME = "Crimes.csv";
    COMMUNITY = "Communities.csv";
    totalCrime = 0;
    totalCodes = 0;
    totalCommunities = 0;
    minYear = 0;
    fileName = CRIME;

    cout << ">> Reading crime data '" << fileName << "' ...";
    // reading in the crimes file
    readInCrime(fileName,totalCrime, allCrimes, minYear);

    cout << "[" << totalCrime << "]" << endl;
    // reading in the IUCR file
    fileName = IUCR_CODES;
    readInIUCR(fileName,codeList, totalCodes);
    cout << ">> Reading IUCR codes '" << IUCR_CODES << "' ... [" << totalCodes << "]" << endl;

    // reading the community file
    fileName = COMMUNITY;
    readCom(fileName, comNames, totalCommunities);
    cout << ">> Reading communities '" << COMMUNITY << "' ... [" << totalCommunities << "]" << endl;
    cout << "\n\n";

    // sorting by IUCR
    sort(allCrimes.begin(),allCrimes.end(), [](crimeReport c1, crimeReport c2)
    {
        return c1.IUCR < c2.IUCR;
    }
    );

    // printing the top 10 crimes
    printTopten(codeList,allCrimes,totalCodes);

    // printing the second part
    printComInfo(allCrimes,comNames,codeList, totalCrime);

    // printing the third part.
    printIUCRInfo(allCrimes,codeList, minYear, totalCrime);
    system("pause");
}




